const axios = require('axios');

class NewsService {
    constructor() {
        this.newsApiKey = process.env.NEWS_API_KEY;
        this.newsApiUrl = process.env.NEWS_API_URL; 
        this.maxArticles = parseInt(process.env.MAX_ARTICLES) || 5;
    }

    async fetchTechNews(query) {
    try {
        const articles = await this.fetchFromNewsAPI(query);
        return articles;
    } catch (error) {
        console.error('❌ Error fetching news:', error.message);
        throw new Error('Unable to fetch news from any source');
    }
}

    async fetchFromNewsAPI(query) {
        const url = `https://newsapi.org/v2/top-headlines?sources=techcrunch&apiKey=ccda3b6193c34f2ba9d7466e4b1132b3`;
        const headers = {
            'X-API-Key': this.newsApiKey,
            'User-Agent': 'TechNewsBot/1.0'
        };

        const response = await axios.get(url, { headers, timeout: 10000 });
        
        if (response.data.status !== 'ok') {
            throw new Error(`NewsAPI error: ${response.data.message}`);
        }

        return response.data.articles.map(article => ({
            title: article.title,
            description: article.description || '',
            url: article.url,
            source: article.source.name,
            publishedAt: article.publishedAt,
            imageUrl: article.urlToImage
        }));
    }

    async summarizeArticle(description) {
        if (!description) return 'No description available.';

        try {
            // Call local Python summarizer microservice
            const response = await axios.post('http://localhost:5005/summarize', { text: description });
            let summary = response.data.summary || '';
            summary = summary.replace(/\n/g, ' ').trim();
            return summary.length > 200 ? summary.substring(0, 197) + '...' : summary;
        } catch (error) {
            console.error('Summarizer service failed:', error.message);
            // Fallback: first sentence
            const firstSentence = description.split(/[.!?]/)[0].trim();
            return firstSentence.length > 120
                ? firstSentence.substring(0, 117) + '...'
                : firstSentence + (firstSentence.endsWith('.') ? '' : '.');
        }
    }

    async formatNewsForWhatsApp(articles) {
        if (!articles || articles.length === 0) {
            return '📰 *Daily Tech Digest* 📱\n\n❌ No tech news available at the moment. Please try again later.';
        }

        const date = new Date().toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });

        let message = `📰 *Daily Tech Digest* 📱\n`;
        message += `📅 ${date}\n\n`;

        // Summarize all articles in parallel
        const summaries = await Promise.all(
            articles.map(article => this.summarizeArticle(article.description))
        );

        articles.forEach((article, idx) => {
            const summary = summaries[idx];
            message += `• ${summary} [🔗](${article.url})\n`;
        });

        return message.trim();
    }

    async getFormattedDailyNews() {
        const articles = await this.fetchTechNews('technology');
        // More emojis for variety
        const newsEmojis = ['📰', '🚀', '💡', '🔬', '🤖', '📱', '🌐', '🧠', '✨', '📢', '📡', '🦾', '🧩', '🛠️', '📊', '🦾', '🧬', '🛰️', '💻', '📈', '🔗'];
        // Shorten summaries further (max 60 chars)
        const summaries = await Promise.all(
            articles.map(async (article) => {
                let summary = await this.summarizeArticle(article.description);
                // Remove aggressive trimming, just use the model's summary
                return summary;
            })
        );
        // Randomize header/footer
        const headers = [
            '🗞️ *Tech News Flash*',
            '🚀 *Today in Tech*',
            '🤖 *AI & Tech Digest*',
            '✨ *Trending Tech Headlines*',
            '📱 *Quick Tech Bytes*'
        ];
        const footers = [
            '🌊 Generated by Tech Waves',
            '🤖 Powered by AI',
            '📰 Curated for you',
            '✨ Stay curious!',
            '🚀 See you tomorrow!'
        ];
        const header = headers[Math.floor(Math.random() * headers.length)];
        const footer = footers[Math.floor(Math.random() * footers.length)];
        let message = `${header}\n\n`;
        articles.forEach((article, idx) => {
            const summary = summaries[idx];
            const emoji = newsEmojis[idx % newsEmojis.length];
            message += `${emoji} ${summary}\n\n`;
        });
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', { hour12: false });
        message += `──────────────\n`;
        message += `${footer}\n`;
        message += `🕒 ${timeString}`;
        return {
            success: true,
            message: message.trim(),
            articles,
            rawData: articles,
            raw: message.trim()
        };
    }

    async sendNewsToWhatsApp(targetId) {
        const newsResult = await this.getFormattedDailyNews();
        console.log('Sending news to WhatsApp...');
        await this.whatsappService.sendFormattedNews(targetId, newsResult.message);
        console.log('News sent!');
    }
}

module.exports = NewsService;

// Only for testing/demo: wrap in an async IIFE
if (require.main === module) {
    (async () => {
        const newsService = new NewsService();
        const message = await newsService.getFormattedDailyNews();
        console.log(message);
    })();
}